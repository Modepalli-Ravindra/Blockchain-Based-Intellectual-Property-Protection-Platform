import React, { useRef, useCallback } from 'react';
import Certificate from './Certificate';
import type { User, Asset } from '../types';
import { useToast } from '../hooks/useToast';
import { downloadCertificate, downloadTextCertificate } from '../services/pdfCertificateService';
import { ThemeToggle } from './ThemeToggle';

// Declare the global window properties for the libraries
declare global {
  interface Window {
    html2canvas: any;
    jspdf: any;
  }
}

interface PublicCertificatePageProps {
  data: {
    asset: Asset;
    owner: { name: string; email: string };
  };
}

const ShieldOutlineIcon: React.FC<{className?: string}> = ({className}) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className || "h-8 w-8"} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" />
    </svg>
);

const DownloadIcon: React.FC = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
    </svg>
);

const PublicCertificatePage: React.FC<PublicCertificatePageProps> = ({ data }) => {
  const { asset, owner } = data;
  const certificateRef = useRef<HTMLDivElement>(null);
  const { addToast } = useToast();
  
  // The Certificate component expects a full User object. We'll create a mock one.
  const userForCertificate: User = {
    ...owner,
    id: '', // Not needed for display
    rewards: 0, // Not needed for display
  };

  const handleDownloadPdf = useCallback(async () => {
    try {
        // Try to generate and download PDF certificate
        await downloadCertificate({ asset, owner: userForCertificate });
        addToast('PDF certificate downloaded successfully!', 'success');
    } catch (error: any) {
        console.error('Error generating PDF certificate:', error);
        addToast(`PDF generation failed: ${error.message}`, 'error');
        
        // Fallback to text certificate
        try {
            downloadTextCertificate({ asset, owner: userForCertificate });
            addToast('Text certificate downloaded successfully!', 'success');
        } catch (textError) {
            console.error('Error generating text certificate:', textError);
            addToast('Failed to generate certificate in any format.', 'error');
        }
    }
  }, [asset, userForCertificate, addToast]);

  const handleDownloadText = useCallback(() => {
    try {
      // Create certificate content
      const certificateContent = `
IPProtect Digital Asset Certificate
===================================

Asset Name: ${asset.name}
Asset ID: ${asset.id}
File Type: ${asset.fileType}
Description: ${asset.description || 'No description provided'}

Owner Information:
- Owner Name: ${owner.name}
- Owner Email: ${owner.email}

Registration Details:
- Registration Date: ${new Date(asset.timestamp).toLocaleString()}
- File Hash: ${asset.hash}

This certificate verifies the authenticity and ownership of the digital asset.
The file hash can be used to verify the integrity of the original file.

Certificate generated by IPProtect - Secure Digital Asset Management
      `.trim();

      // Create and download text file
      const blob = new Blob([certificateContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `IPProtect_Certificate_${asset.name.replace(/\s/g, '_')}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      addToast('Certificate downloaded successfully!', 'success');
    } catch (error) {
      console.error('Error generating text certificate:', error);
      addToast('Failed to generate certificate', 'error');
    }
  }, [asset, owner, addToast]);

  return (
    <div className="min-h-screen bg-slate-100 dark:bg-slate-900 flex flex-col items-center p-4 sm:p-6 md:p-8">
      <header className="w-full max-w-5xl mb-8">
        <div className="flex justify-between items-center p-4 bg-white/50 dark:bg-slate-800/50 backdrop-blur-sm rounded-xl border border-slate-200 dark:border-slate-800">
            <a href="/" className="flex items-center space-x-3 text-slate-800 dark:text-white" aria-label="Back to IPProtect homepage">
                <ShieldOutlineIcon className="h-7 w-7" />
                <span className="text-xl font-bold">IPProtect</span>
            </a>
            <ThemeToggle />
        </div>
      </header>
      
      <main className="w-full max-w-4xl flex-grow flex flex-col items-center">
        <p className="mb-4 text-center text-slate-600 dark:text-slate-400">This is a publicly shared, verifiable certificate of ownership.</p>
        <Certificate ref={certificateRef} asset={asset} user={userForCertificate} />
        <div className="mt-6 text-center flex flex-col sm:flex-row gap-4 justify-center">
            <button 
                onClick={handleDownloadPdf} 
                className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center mx-auto shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
                <DownloadIcon />
                Download PDF Certificate
            </button>
            <button 
                onClick={handleDownloadText} 
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center mx-auto shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
                <DownloadIcon />
                Download Text Certificate
            </button>
        </div>
      </main>
       <footer className="w-full max-w-5xl mt-12 text-center text-sm text-slate-500 dark:text-slate-400">
          <p>&copy; {new Date().getFullYear()} IPProtect. All rights reserved.</p>
          <p className="mt-1">Secure your ideas with the power of the blockchain.</p>
      </footer>
    </div>
  );
};

export default PublicCertificatePage;